//
//  MessagesViewController.swift
//  meh MessagesExtension
//
//  Created by Ahmed Mustafa on 5/6/20.
//  Copyright Â© 2020 med. All rights reserved.
//

import UIKit
import Messages
import Photos
import GoogleMobileAds

class MessagesViewController: MSMessagesAppViewController, CompactViewContDelegate, FullViewContDelegate, StartMenuViewContDelegate, EndViewContDelegate, WaitViewContDelegate {
    
    override func viewDidLoad() {
        
        //self.view.backgroundColor = UIColor(patternImage: UIImage(named: "roll_back")!)
        //getPic()
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // Use this method to configure the extension and restore previously stored state.
        
        
        print("willBecomeActive, ")
        /*if ( FullViewCont().getPhotoStatus() == false ){
            print("willBecomeActive, its 2 so NO new image allowed")
        }else{
            FullViewCont().ChangeFullViewCount(newAssignment: true)
            print("willBecomeActive, its 1 so new image allowed")
        }*/
        GADMobileAds.sharedInstance().start(completionHandler: nil)
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        
        print("didResignActive,")
        //FullViewCont().ChangeFullViewCount(newAssignment: false)
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("didReceive, no idea what to do with this yet")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        
        print("didStartSending, ")
        //FullViewCont().ChangeFullViewCount(newAssignment: true)
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
        
        //FullViewCont().ChangeFullViewCount(newAssignment: false)
        print("didCancelSending, set to 2 so no new image allowed")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        
        guard let conversation = activeConversation else{
            fatalError("Expected an active conversation")
        }
        
        presentViewController(for: conversation, with: presentationStyle)
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print("didTransition")
    }
    
    // MARK: My code Parts
    
    var GIS = Main(GameIsStarted: false, SentPhoto: false )
    var turnCount: Int = 0
    var count = 0
    
    class Main{
        
        var GameIsStarted: Bool
        var SentPhoto: Bool
        init(GameIsStarted: Bool, SentPhoto: Bool ){
            self.GameIsStarted = GameIsStarted
            self.SentPhoto = SentPhoto
        }
    }
    
    // a function to get a pic on load so that permission can be asked for as soon as possible
    func getPic(){
        if (count == 0){
            _ = getRandomPhoto(myBool: true)
            count+=1
        }
    }
    
    // a function to decide what viewController to use depending on the case, gotten from Apple Example
    private func presentViewController( for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle ){
        
        var controller: UIViewController!
        
        //print( String(main.GameIsStarted) + "  -  " + String(turnCount) )
        
        if (presentationStyle == .compact){
            // compact
            //print( "if - requestedCompact" )
            controller = instantiateCompactViewCont()
        }
        else{
            if (conversation.selectedMessage != nil){
                
                //print( "else - requestedFull, game has started" )
                let str =  conversation.selectedMessage!.url?.absoluteString
                var partOne = str?.prefix(1)
                //var partTwo = str?.prefix(1)
                
                if( str?.count == 17 ){
                    
                    //this means that they are both true
                    print("bof true")
                    partOne = "true"
                    //partTwo = "true"
                }
                else if( str?.count == 19){
                    
                    //this means they are both false
                    print("bof false")
                    partOne = "false"
                    //partTwo = "false"
                }
                else if (str?.count == 18){
                    //this means one is true and one is false
                    
                    if( str?.hasSuffix("false") == true ){
                        
                        // if the last one is false then other one will be true
                        print("else if")
                        partOne = "true"
                        //partTwo = "false"
                    }
                    else{
                        
                        // else the first one is false and end is true
                        print("else else")
                        partOne = "false"
                        //partTwo = "true"
                    }
                }
                
                let GameIsStarted = Bool( String(partOne!) )
                //print(GameIsStarted!)
                
                //let SentPhoto = Bool( String(partTwo!) )
                //print(SentPhoto!)
                
                //GIS.SentPhoto = SentPhoto!
                
                
                if( conversation.selectedMessage?.senderParticipantIdentifier == conversation.localParticipantIdentifier ){
                    print("yea this the part, wait view cont")
                    controller = instantiateWaitViewCont()
                }
                else{
                    
                    if ( GameIsStarted == true ){
                        controller = instantiateFullViewCont()
                    }
                    else{
                        controller = instantiateEndViewCont()
                    }
                }

            }
            else{
                //print( "else - requestedStartMenu, game hasnt started so we pulling up the menu" )
                controller = instantiateStartMenuViewCont()
            }
        }
        
        // embed the new controller
        
        addChild(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview( controller.view )
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove( toParent: self )
        
    }
    
    private func presentViewController2( for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle ){
        
        var controller: UIViewController!
        
        controller = instantiateWaitViewCont()
        
        // embed the new controller
        
        addChild(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview( controller.view )
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove( toParent: self )
               
    }
    
    // MARK: Compact/Full View
    
    // this turns on the compactView
    private func instantiateCompactViewCont() -> UIViewController{
        
        guard let controller = self.storyboard?.instantiateViewController(identifier: "CompactViewCont") as? CompactViewCont else{
            fatalError(" CompactViewCont not found ")
        }
        
        controller.delegate = self
        
        return controller
    }
    
    // this turns on the fullView
    private func instantiateFullViewCont() -> UIViewController{
        
         guard let controller = self.storyboard?.instantiateViewController(identifier: "FullViewCont") as? FullViewCont else{
                   fatalError(" FullViewCont not found ")
               }
               
        controller.delegate = self
        
        return controller
    }
    
    // this turns on the startMenuView
    private func instantiateStartMenuViewCont() -> UIViewController{
        
         guard let controller = self.storyboard?.instantiateViewController(identifier: "StartMenuViewCont") as? StartMenuViewCont else{
                   fatalError(" StartMenuViewCont not found ")
               }
               
        controller.delegate = self
        
        return controller
    }
    
    // this turns on the endView
    private func instantiateEndViewCont() -> UIViewController{
        
        guard let controller = self.storyboard?.instantiateViewController(identifier: "EndViewCont") as? EndViewCont else{
            fatalError(" EndViewCont not found ")
        }
        
        controller.delegate = self
        
        return controller
    }
    
    // this turns on the WaitView
    private func instantiateWaitViewCont() -> UIViewController{
        
        guard let controller = self.storyboard?.instantiateViewController(identifier: "WaitViewCont") as? WaitViewCont else{
            fatalError(" WaitViewCont not found ")
        }
        
        controller.delegate = self
        
        return controller
    }
    
    // this is to use the CompactViewContDelegate
    func CompactViewContDidSubmit(){
        
        //this takes you from compact start menu to full start menu guy
        GIS.GameIsStarted = false
        requestPresentationStyle(.expanded)
    }
    
    // this is to use the FullViewContDelegate, it submits the text, depending on if GameIsStarted or not
    func FullViewContDidSubmit(image: UIImage, caption: String, GameIsStarted: Bool) {
        
        let components = NSURLComponents()
        let conversation = self.activeConversation
        
        //this sets up the message parts and then adds it, and sends it
        let session = conversation?.selectedMessage?.session
        let message = MSMessage( session: session ?? MSSession() )
        
        let layout = MSMessageTemplateLayout()
        
        layout.image = image
        
        if ( GameIsStarted == false ){
            // This means the game just ended
            components.queryItems = [URLQueryItem(name: "GIS", value: String(false)), URLQueryItem(name: "SP", value: String((conversation!.localParticipantIdentifier.uuidString)))]
            
            layout.caption = "$\(conversation!.localParticipantIdentifier.uuidString) won't send their photo. You win!"
            message.url = components.url
            message.layout = layout
            self.activeConversation?.send( message , completionHandler: nil )
        }
        else{
            
            // The game is still going on
            components.queryItems = [URLQueryItem(name: "GIS", value: String(true)), URLQueryItem(name: "SP", value: String(true)) ]
//            layout.subcaption = convertLatLongToAddress( latitude: getLocation().coordinate.latitude, longitude: getLocation().coordinate.longitude )
            // layout.trailingSubcaption = getDate().
            layout.caption = caption
            message.url = components.url
            message.layout = layout
            self.activeConversation?.send(message, completionHandler: nil)
        }
        
        GIS.SentPhoto = true
        
        dismiss()
        
    }
    
    func convertLatLongToAddress(latitude:Double,longitude:Double) -> String{

        let geoCoder = CLGeocoder()
        let location = CLLocation(latitude: latitude, longitude: longitude)
        geoCoder.reverseGeocodeLocation(location, completionHandler: { (placemarks, error) -> Void in

            // Place details
            var placeMark: CLPlacemark!
            placeMark = placemarks?[0]

            // Location name
            if let locationName = placeMark.location {
                print(locationName)
            }
            // Street address
            if let street = placeMark.thoroughfare {
                print(street)
            }
            // City
            if let city = placeMark.subAdministrativeArea {
                print(city)
            }
            // Zip code
            if let zip = placeMark.isoCountryCode {
                print(zip)
            }
            // Country
            if let country = placeMark.country {
                print(country)
            }
            
            return ( placeMark.location + " " +  placeMark.thoroughfare + " " + placeMark.subAdministrativeArea + " " + placeMark.country )
        })

    }
    
    // this sends the initial message at the start menu when you press start
    // this sets up the message parts and then adds it, and sends it, starts the game from main menu
    func StartMenuViewContDidSubmit( image: UIImage, caption: String, GameIsStarted: Bool ){
        
        let components = NSURLComponents()
        components.queryItems = [URLQueryItem(name: "GIS", value: String(true)), URLQueryItem(name: "SP", value: String(true)) ]
        GIS.GameIsStarted = GameIsStarted
        
        let session = self.activeConversation?.selectedMessage?.session
        let message = MSMessage( session: session ?? MSSession() )
        let layout = MSMessageTemplateLayout()
        
        layout.image = image
        layout.caption = caption
        
        message.url = components.url
        message.layout = layout
        
        self.activeConversation?.send( message , completionHandler: nil )
        //requestPresentationStyle(.compact)
        
        GIS.SentPhoto = true
        
        dismiss()
    }
    
    // this is the restarted message, it will be like, hey do you want to
    // this is just the function from in the endview part, this sends the last image, saying you are done
    func EndViewContDidSubmit( image: UIImage, caption: String, GameIsStarted: Bool ){
        
        let components = NSURLComponents()
        components.queryItems = [URLQueryItem(name: "GIS", value: String(GameIsStarted)), URLQueryItem(name: "SP", value: String(true)) ]
        
        let session = self.activeConversation?.selectedMessage?.session
        let message = MSMessage( session: session ?? MSSession() )
        let layout = MSMessageTemplateLayout()
        
        layout.image = image
        layout.caption = caption
        
        message.url = components.url
        message.layout = layout
        
        self.activeConversation?.send( message , completionHandler: nil )
        dismiss()
    }
    
    func WaitViewContDidSubmit() {
        dismiss()
    }

}
